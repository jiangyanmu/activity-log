name: O-Level CI/CD Pipeline

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Bun (for build if needed)
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Run unit tests
        run: npm test

      - name: Build project
        run: |
          npm run build
          zip -r build.zip .

      - name: Get version from package.json
        id: version
        run: echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-stagging:
    needs: build
    runs-on: ubuntu-latest
    environment: Stagging
    env:
      TAG: stagging-${{ env.VERSION }}
      NOTE: Testing pre-production release
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Create git tag and push (Stagging)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git rev-parse --verify "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
          else
            git tag -a "$TAG" -m "$NOTE"
            git push origin "$TAG"
          fi

      - name: Create Release (Stagging)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.TAG }}
          NOTE: ${{ env.NOTE }}
        run: |
          gh release create "$TAG" build.zip --notes "$NOTE" || echo "Release may already exist"

      - name: Slack Notification (Stagging)
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: YOUR_CHANNEL_ID
          slack-message: "Stagging release ${{ env.TAG }} deployed successfully!"
        env:
          SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }}

  deploy-production:
    needs: deploy-stagging
    runs-on: ubuntu-latest
    environment: Production
    env:
      TAG: prod-${{ env.VERSION }}
      NOTE: Production release
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Create git tag and push (Production)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git rev-parse --verify "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
          else
            git tag -a "$TAG" -m "$NOTE"
            git push origin "$TAG"
          fi

      - name: Create Release (Production)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.TAG }}
          NOTE: ${{ env.NOTE }}
        run: |
          gh release create "$TAG" build.zip --notes "$NOTE" || echo "Release may already exist"

      - name: Slack Notification (Production)
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: YOUR_CHANNEL_ID
          slack-message: "Production release ${{ env.TAG }} deployed successfully!"
        env:
          SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }}

      - name: Rollback failed release
        if: failure()
        run: |
          echo "Deployment failed. Rolling back..."
          gh release delete ${{ env.TAG }} -y || echo "No release to delete"
          git tag -d ${{ env.TAG }} || echo "No tag to delete"
          git push origin :refs/tags/${{ env.TAG }}
