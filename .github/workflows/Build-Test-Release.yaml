name: Build-Test-Release

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      TEST_ENV:
        description: "Test/Deploy environment (staging or production)"
        required: true
        default: staging

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_tag: ${{ steps.set_tag.outputs.build_tag }}
    env:
      TEST_ENV: ${{ github.event.inputs.TEST_ENV || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            echo "✅ Using npm ci (lockfile found)"
            npm ci
          else
            echo "⚠️ No package-lock.json found, using npm install"
            npm install
          fi

      - name: Build project
        run: npm run build

      - name: Set BUILD_TAG
        id: set_tag
        run: echo "build_tag=${{ env.TEST_ENV }}-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/

  test-unit:
    runs-on: ubuntu-latest
    needs: build
    env:
      TEST_ENV: ${{ env.TEST_ENV }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
      - name: Run Unit Tests
        run: |
          echo "🧪 Running Unit Tests in $TEST_ENV"
          npm run test:unit

  test-integration:
    runs-on: ubuntu-latest
    needs: build
    env:
      TEST_ENV: ${{ env.TEST_ENV }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
      - name: Run Integration Tests
        run: |
          echo "🧩 Running Integration Tests in $TEST_ENV"
          npm run test:integration

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    if: ${{ env.TEST_ENV && env.TEST_ENV.toLowerCase() == 'staging' }}
    environment: staging
    env:
      TEST_ENV: staging
      BUILD_TAG: staging-${{ github.run_number }}
      RELEASE_NOTE: "Staging release from workflow #${{ github.run_number }}"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Package build files
        run: zip -r dist.zip dist
      - name: Create Staging Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BUILD_TAG }}
          release_name: ${{ env.BUILD_TAG }}
          body: ${{ env.RELEASE_NOTE }}
          draft: false
          prerelease: true
      - name: Upload Staging Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist.zip
          asset_name: dist-${{ github.run_number }}.zip
          asset_content_type: application/zip

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    if: ${{ env.TEST_ENV && env.TEST_ENV.toLowerCase() == 'production' }}
    environment: production
    env:
      TEST_ENV: production
      BUILD_TAG: production-${{ github.run_number }}
      RELEASE_NOTE: "Production release from workflow #${{ github.run_number }}"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Package build files
        run: zip -r dist.zip dist
      - name: Create Production Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BUILD_TAG }}
          release_name: ${{ env.BUILD_TAG }}
          body: ${{ env.RELEASE_NOTE }}
          draft: false
          prerelease: false
      - name: Upload Production Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist.zip
          asset_name: dist-${{ github.run_number }}.zip
          asset_content_type: application/zip
